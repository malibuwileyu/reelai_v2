rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidContentType(contentType, allowedTypes) {
      return contentType.matches(allowedTypes);
    }
    
    function isValidFileSize(size, maxSize) {
      return size < maxSize;
    }

    // Video files
    match /videos/{userId}/{videoId}/{fileName} {
      allow read: if true; // Public videos
      allow write: if isAuthenticated() 
        && isOwner(userId)
        && isValidContentType(request.resource.contentType, 'video/.*')
        && isValidFileSize(request.resource.size, 500 * 1024 * 1024); // 500MB max
    }

    // Video thumbnails
    match /thumbnails/{userId}/{videoId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated()
        && isOwner(userId)
        && isValidContentType(request.resource.contentType, 'image/.*')
        && isValidFileSize(request.resource.size, 5 * 1024 * 1024); // 5MB max
    }

    // User avatars
    match /avatars/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated()
        && isOwner(userId)
        && isValidContentType(request.resource.contentType, 'image/.*')
        && isValidFileSize(request.resource.size, 2 * 1024 * 1024); // 2MB max
    }

    // Temporary processing files
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
} 