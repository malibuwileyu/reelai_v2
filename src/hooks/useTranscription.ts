import { useState, useCallback } from 'react';
import { OpenAIService, OpenAIError } from '../services/openaiService';
import { useAudioExtractor } from './useAudioExtractor';
import type { VideoTranscript } from '../features/learning-path/types';

export interface UseTranscriptionOptions {
  onProgress?: (progress: number) => void;
  onComplete?: (transcript: VideoTranscript) => void;
  onError?: (error: Error) => void;
}

export interface UseTranscriptionResult {
  isLoading: boolean;
  error: Error | null;
  progress: number;
  transcribe: (videoFile: File | Blob) => Promise<VideoTranscript>;
}

/**
 * Hook for handling video transcription using audio extraction and OpenAI
 */
export function useTranscription({
  onProgress,
  onComplete,
  onError
}: UseTranscriptionOptions = {}): UseTranscriptionResult {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [progress, setProgress] = useState(0);

  const { extractAudio } = useAudioExtractor({
    onProgress: (extractionProgress) => {
      // Audio extraction is 50% of the total process
      setProgress(extractionProgress * 0.5);
      onProgress?.(extractionProgress * 0.5);
    }
  });

  const openai = new OpenAIService();

  const transcribe = useCallback(async (videoFile: File | Blob): Promise<VideoTranscript> => {
    try {
      setError(null);
      setIsLoading(true);
      setProgress(0);

      // Step 1: Extract audio (0-50%)
      const audioBlob = await extractAudio(videoFile);

      // Update progress for transcription start
      setProgress(50);
      onProgress?.(50);

      // Step 2: Transcribe audio (50-75%)
      const transcriptionText = await openai.transcribeAudio(audioBlob);
      setProgress(75);
      onProgress?.(75);

      // Step 3: Analyze transcription (75-100%)
      const analysis = await openai.analyzeTranscription(transcriptionText);
      
      // Create final transcript
      const transcript: VideoTranscript = {
        videoId: '', // This will be set by the video service
        segments: analysis.chapters.map(chapter => ({
          startTime: chapter.startTime * 1000, // Convert to milliseconds
          endTime: chapter.endTime * 1000,
          text: chapter.title,
          speakerId: undefined // Optional field
        })),
        language: 'en',
        isAutogenerated: true
      };

      setProgress(100);
      onProgress?.(100);
      onComplete?.(transcript);

      return transcript;
    } catch (error) {
      const finalError = error instanceof Error ? error : new Error('Unknown error occurred');
      setError(finalError);
      onError?.(finalError);
      throw finalError;
    } finally {
      setIsLoading(false);
    }
  }, [extractAudio, openai, onProgress, onComplete, onError]);

  return {
    isLoading,
    error,
    progress,
    transcribe
  };
} 