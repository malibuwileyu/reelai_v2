import { Timestamp } from 'firebase/firestore';

/**
 * Core question types supported by the system
 */
export type QuestionType = 
  | 'multiple_choice'
  | 'true_false'
  | 'fill_in_blank'
  | 'code_completion'
  | 'timestamp_reference';

/**
 * Difficulty levels for questions and quizzes
 */
export type QuestionDifficulty = 'beginner' | 'intermediate' | 'advanced';

/**
 * Base question interface that all question types extend
 */
export interface BaseQuestion {
  id: string;
  type: QuestionType;
  question: string;
  explanation?: string;
  difficulty: QuestionDifficulty;
  tags: string[];
  sourceVideoId?: string;
  sourceTimestamp?: number;
  createdAt: Timestamp;
  updatedAt: Timestamp;
  creatorId: string;
  isAutogenerated: boolean;
  confidence?: number; // For auto-generated questions
}

/**
 * Multiple choice question type
 */
export interface MultipleChoiceQuestion extends BaseQuestion {
  type: 'multiple_choice';
  options: string[];
  correctOptionIndex: number;
  distractorExplanations?: string[]; // Explanations for why each distractor is wrong
}

/**
 * True/False question type
 */
export interface TrueFalseQuestion extends BaseQuestion {
  type: 'true_false';
  correctAnswer: boolean;
}

/**
 * Fill in the blank question type
 */
export interface FillInBlankQuestion extends BaseQuestion {
  type: 'fill_in_blank';
  textBefore: string;
  textAfter: string;
  correctAnswer: string;
  acceptableAnswers?: string[]; // Alternative correct answers
}

/**
 * Code completion question type
 */
export interface CodeCompletionQuestion extends BaseQuestion {
  type: 'code_completion';
  codeContext: string;
  blankLineNumber: number;
  correctAnswer: string;
  testCases?: {
    input: string;
    expectedOutput: string;
  }[];
}

/**
 * Video timestamp reference question
 */
export interface TimestampReferenceQuestion extends BaseQuestion {
  type: 'timestamp_reference';
  videoId: string;
  timestamp: number;
  options: string[];
  correctOptionIndex: number;
}

/**
 * Union type of all question types
 */
export type Question =
  | MultipleChoiceQuestion
  | TrueFalseQuestion
  | FillInBlankQuestion
  | CodeCompletionQuestion
  | TimestampReferenceQuestion;

/**
 * Question bank for storing generated questions
 */
export interface QuestionBank {
  id: string;
  videoId: string;
  questions: Question[];
  createdAt: Timestamp;
  updatedAt: Timestamp;
  metadata: {
    videoTitle: string;
    videoDuration: number;
    transcriptId?: string;
    generationMethod: 'auto' | 'manual' | 'hybrid';
    averageConfidence?: number;
    topics?: string[];
    assessedDifficulty?: QuestionDifficulty;
  };
}

/**
 * Quiz generation configuration
 */
export interface QuizGenerationConfig {
  targetQuestionCount: number;
  questionTypes: QuestionType[];
  difficulty: QuestionDifficulty;
  includeTimestampReferences: boolean;
  minConfidenceScore?: number;
  preferredTopics?: string[];
  excludedTopics?: string[];
  timeLimit?: number;
}

/**
 * Quiz attempt tracking
 */
export interface QuizAttempt {
  id: string;
  userId: string;
  quizId: string;
  questionBankId: string;
  questions: Question[];
  answers: Record<string, number | string | boolean>;
  score: number;
  startedAt: Timestamp;
  completedAt?: Timestamp;
  timeSpentMs?: number;
  metadata?: {
    browserInfo?: string;
    ipAddress?: string;
    deviceType?: string;
  };
} 