rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserData(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Allow all operations in test environment
    function isTestEnv() {
      return request.resource.data.testEnv == true || resource.data.testEnv == true;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidVideoData(data) {
      return data.size() < 1000000 
        && data.title is string
        && data.title.size() > 0
        && data.title.size() <= 100
        && data.description is string
        && data.description.size() <= 5000
        && data.category in ['education', 'tutorial', 'lecture', 'presentation', 'other']
        && data.tags is list
        && data.tags.size() <= 20
        && data.isPublic is bool
        && data.language is string
        && data.language.size() <= 10
        && (!('difficulty' in data) || data.difficulty in ['beginner', 'intermediate', 'advanced'])
        && data.views is number
        && data.views >= 0
        && data.likes is number
        && data.likes >= 0;
    }

    function isValidLearningPath(data) {
      return data.size() < 1000000
        && data.title is string
        && data.title.size() > 0
        && data.title.size() <= 100
        && data.description is string
        && data.description.size() <= 5000
        && data.subject is string
        && data.difficulty in ['beginner', 'intermediate', 'advanced']
        && data.prerequisites is list
        && data.estimatedHours is number
        && data.estimatedHours > 0
        && data.milestones is list;
    }
    
    function debug(msg, data) {
      return msg;
    }
    
    // Video rules
    match /videos/{videoId} {
      allow read: if 
        debug('Checking video read access', {
          'isPublic': resource.data.isPublic,
          'resourceCreatorId': resource.data.creatorId,
          'requestAuthUid': request.auth.uid,
          'hasQueryFilters': request.query.filters != null,
          'queryFilters': request.query.filters,
          'queryLimit': request.query.limit
        }) && (
          resource.data.isPublic == true || 
          (isAuthenticated() && resource.data.creatorId == request.auth.uid) ||
          // Allow listing videos with proper query constraints
          (isAuthenticated() && 
           request.query.limit <= 50 && 
           'creatorId' in request.query.filters && 
           request.query.filters.creatorId == request.auth.uid)
        );
      
      allow create: if isAuthenticated() 
        && isValidVideoData(request.resource.data)
        && request.resource.data.creatorId == request.auth.uid;
      
      allow update: if isAuthenticated() 
        && resource.data.creatorId == request.auth.uid
        && isValidVideoData(request.resource.data);
      
      allow delete: if isAuthenticated() 
        && resource.data.creatorId == request.auth.uid;
    }

    // Achievement Progress rules
    match /achievementProgress/{progressId} {
      allow read: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      allow write: if isAuthenticated()
        && request.auth.uid == request.resource.data.userId;
    }

    // Learning Path rules
    match /learningPaths/{pathId} {
      allow read: if true;  // Allow public reading of learning paths
      allow write: if isAuthenticated();
    }

    // Path Progress rules
    match /pathProgress/{progressId} {
      allow read, write: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
    }

    // Milestone Progress rules
    match /milestoneProgress/{progressId} {
      allow read, write: if isAuthenticated()
        && request.auth.uid == resource.data.userId;
    }

    // Progress collection rules
    match /learningPathProgress/{progressId} {
      allow read, write: if isAuthenticated();
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Default allow for development
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
} 